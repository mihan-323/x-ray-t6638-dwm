#include "common.h"

#define FxaaTexTop(tc) s_image.SampleLevel(smp_linear, tc, 0)
#define FxaaTexOff(tc, offset) s_image.SampleLevel(smp_linear, tc, 0, offset)
#define FxaalumaM(base) base.y
#define FxaaLuma(base) base.z

float4 main(float2 tc : TEXCOORD0) : SV_Target0
{	
	float2 posM;
	posM.x = tc.x;
	posM.y = tc.y;
	
	float4 rgbyM = FxaaTexTop(posM);

	float lumaS = FxaaLuma(FxaaTexOff(posM, int2( 0, 1)));
	float lumaE = FxaaLuma(FxaaTexOff(posM, int2( 1, 0)));
	float lumaN = FxaaLuma(FxaaTexOff(posM, int2( 0,-1)));
	float lumaW = FxaaLuma(FxaaTexOff(posM, int2(-1, 0)));

	float maxSM = max(lumaS, FxaalumaM(rgbyM));
	float minSM = min(lumaS, FxaalumaM(rgbyM));
	float maxESM = max(lumaE, maxSM);
	float minESM = min(lumaE, minSM);
	float maxWN = max(lumaN, lumaW);
	float minWN = min(lumaN, lumaW);
	float rangeMax = max(maxWN, maxESM);
	float rangeMin = min(minWN, minESM);
	float rangeMaxScaled = rangeMax * 0.166f;
	float range = rangeMax - rangeMin;
	float rangeMaxClamped = max(0, rangeMaxScaled);
	bool earlyExit = range < rangeMaxClamped;

	if(earlyExit)
		return rgbyM;

	float lumaNW = FxaaLuma(FxaaTexOff(posM, int2(-1,-1)));
	float lumaSE = FxaaLuma(FxaaTexOff(posM, int2( 1, 1)));
	float lumaNE = FxaaLuma(FxaaTexOff(posM, int2( 1,-1)));
	float lumaSW = FxaaLuma(FxaaTexOff(posM, int2(-1, 1)));

	float lumaNS = lumaN + lumaS;
	float lumaWE = lumaW + lumaE;
	float subpixRcpRange = 1.0/range;
	float subpixNSWE = lumaNS + lumaWE;
	float edgeHorz1 = (-2.0 * FxaalumaM(rgbyM)) + lumaNS;
	float edgeVert1 = (-2.0 * FxaalumaM(rgbyM)) + lumaWE;

	float lumaNESE = lumaNE + lumaSE;
	float lumaNWNE = lumaNW + lumaNE;
	float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;
	float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;

	float lumaNWSW = lumaNW + lumaSW;
	float lumaSWSE = lumaSW + lumaSE;
	float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);
	float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);
	float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;
	float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;
	float edgeHorz = abs(edgeHorz3) + edgeHorz4;
	float edgeVert = abs(edgeVert3) + edgeVert4;

	float subpixNWSWNESE = lumaNWSW + lumaNESE;
	float lengthSign = screen_res.z;
	bool horzSpan = edgeHorz >= edgeVert;
	float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;

	if(!horzSpan) lumaN = lumaW;
	if(!horzSpan) lumaS = lumaE;
	if(horzSpan) lengthSign = screen_res.w;
	float subpixB = (subpixA * (1.0/12.0)) - FxaalumaM(rgbyM);

	float gradientN = lumaN - FxaalumaM(rgbyM);
	float gradientS = lumaS - FxaalumaM(rgbyM);
	float lumaNN = lumaN + FxaalumaM(rgbyM);
	float lumaSS = lumaS + FxaalumaM(rgbyM);
	bool pairN = abs(gradientN) >= abs(gradientS);
	float gradient = max(abs(gradientN), abs(gradientS));
	if(pairN) lengthSign = -lengthSign;
	float subpixC = saturate(abs(subpixB) * subpixRcpRange);

	float2 posB;
	posB.x = posM.x;
	posB.y = posM.y;
	float2 offNP;
	offNP.x = (!horzSpan) ? 0.0 : screen_res.z;
	offNP.y = ( horzSpan) ? 0.0 : screen_res.w;
	if(!horzSpan) posB.x += lengthSign * 0.5;
	if( horzSpan) posB.y += lengthSign * 0.5;

	float2 posN;
	posN.x = posB.x - offNP.x;
	posN.y = posB.y - offNP.y;
	float2 posP;
	posP.x = posB.x + offNP.x;
	posP.y = posB.y + offNP.y;
	float subpixD = ((-2.0)*subpixC) + 3.0;
	float lumaEndN = FxaaLuma(FxaaTexTop(posN));
	float subpixE = subpixC * subpixC;
	float lumaEndP = FxaaLuma(FxaaTexTop(posP));

	if(!pairN) lumaNN = lumaSS;
	float gradientScaled = gradient * 1.0/4.0;
	float lumaMM = FxaalumaM(rgbyM) - lumaNN * 0.5;
	float subpixF = subpixD * subpixE;
	bool lumaMLTZero = lumaMM < 0.0;

	lumaEndN -= lumaNN * 0.5;
	lumaEndP -= lumaNN * 0.5;
	bool doneN = abs(lumaEndN) >= gradientScaled;
	bool doneP = abs(lumaEndP) >= gradientScaled;
	if(!doneN) posN.x -= offNP.x;
	if(!doneN) posN.y -= offNP.y;
	bool doneNP = (!doneN) || (!doneP);
	if(!doneP) posP.x += offNP.x;
	if(!doneP) posP.y += offNP.y;

	if(doneNP) 
	{
		if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
		if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
		if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
		if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
		doneN = abs(lumaEndN) >= gradientScaled;
		doneP = abs(lumaEndP) >= gradientScaled;
		if(!doneN) posN.x -= offNP.x;
		if(!doneN) posN.y -= offNP.y;
		doneNP = (!doneN) || (!doneP);
		if(!doneP) posP.x += offNP.x;
		if(!doneP) posP.y += offNP.y;

		if(doneNP) 
		{
			if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
			if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
			if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
			if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
			doneN = abs(lumaEndN) >= gradientScaled;
			doneP = abs(lumaEndP) >= gradientScaled;
			if(!doneN) posN.x -= offNP.x;
			if(!doneN) posN.y -= offNP.y;
			doneNP = (!doneN) || (!doneP);
			if(!doneP) posP.x += offNP.x;
			if(!doneP) posP.y += offNP.y;

			if(doneNP) 
			{
				if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
				if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
				if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
				if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
				doneN = abs(lumaEndN) >= gradientScaled;
				doneP = abs(lumaEndP) >= gradientScaled;
				if(!doneN) posN.x -= offNP.x;
				if(!doneN) posN.y -= offNP.y;
				doneNP = (!doneN) || (!doneP);
				if(!doneP) posP.x += offNP.x;
				if(!doneP) posP.y += offNP.y;

				if(doneNP) 
				{
					if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
					if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
					if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
					if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
					doneN = abs(lumaEndN) >= gradientScaled;
					doneP = abs(lumaEndP) >= gradientScaled;
					if(!doneN) posN.x -= offNP.x * 1.5;
					if(!doneN) posN.y -= offNP.y * 1.5;
					doneNP = (!doneN) || (!doneP);
					if(!doneP) posP.x += offNP.x * 1.5;
					if(!doneP) posP.y += offNP.y * 1.5;

					if(doneNP) 
					{
						if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
						if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
						if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
						if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
						doneN = abs(lumaEndN) >= gradientScaled;
						doneP = abs(lumaEndP) >= gradientScaled;
						if(!doneN) posN.x -= offNP.x * 2.0;
						if(!doneN) posN.y -= offNP.y * 2.0;
						doneNP = (!doneN) || (!doneP);
						if(!doneP) posP.x += offNP.x * 2.0;
						if(!doneP) posP.y += offNP.y * 2.0;

						if(doneNP) 
						{
							if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
							if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
							if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
							if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
							doneN = abs(lumaEndN) >= gradientScaled;
							doneP = abs(lumaEndP) >= gradientScaled;
							if(!doneN) posN.x -= offNP.x * 2.0;
							if(!doneN) posN.y -= offNP.y * 2.0;
							doneNP = (!doneN) || (!doneP);
							if(!doneP) posP.x += offNP.x * 2.0;
							if(!doneP) posP.y += offNP.y * 2.0;

							if(doneNP) 
							{
								if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
								if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
								if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
								if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
								doneN = abs(lumaEndN) >= gradientScaled;
								doneP = abs(lumaEndP) >= gradientScaled;
								if(!doneN) posN.x -= offNP.x * 2.0;
								if(!doneN) posN.y -= offNP.y * 2.0;
								doneNP = (!doneN) || (!doneP);
								if(!doneP) posP.x += offNP.x * 2.0;
								if(!doneP) posP.y += offNP.y * 2.0;
						
								if(doneNP) 
								{
									if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
									if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
									if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
									if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
									doneN = abs(lumaEndN) >= gradientScaled;
									doneP = abs(lumaEndP) >= gradientScaled;
									if(!doneN) posN.x -= offNP.x * 2.0;
									if(!doneN) posN.y -= offNP.y * 2.0;
									doneNP = (!doneN) || (!doneP);
									if(!doneP) posP.x += offNP.x * 2.0;
									if(!doneP) posP.y += offNP.y * 2.0;
						
									if(doneNP) 
									{
										if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
										if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
										if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
										if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
										doneN = abs(lumaEndN) >= gradientScaled;
										doneP = abs(lumaEndP) >= gradientScaled;
										if(!doneN) posN.x -= offNP.x * 4.0;
										if(!doneN) posN.y -= offNP.y * 4.0;
										doneNP = (!doneN) || (!doneP);
										if(!doneP) posP.x += offNP.x * 4.0;
										if(!doneP) posP.y += offNP.y * 4.0;
						
										if(doneNP) 
										{
											if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
											if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
											if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
											if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
											doneN = abs(lumaEndN) >= gradientScaled;
											doneP = abs(lumaEndP) >= gradientScaled;
											if(!doneN) posN.x -= offNP.x * 8.0;
											if(!doneN) posN.y -= offNP.y * 8.0;
											doneNP = (!doneN) || (!doneP);
											if(!doneP) posP.x += offNP.x * 8.0;
											if(!doneP) posP.y += offNP.y * 8.0;
						
											if(doneNP) 
											{
												if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(posN.xy));
												if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(posP.xy));
												if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
												if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
												doneN = abs(lumaEndN) >= gradientScaled;
												doneP = abs(lumaEndP) >= gradientScaled;
												if(!doneN) posN.x -= offNP.x * 13;
												if(!doneN) posN.y -= offNP.y * 13;
												doneNP = (!doneN) || (!doneP);
												if(!doneP) posP.x += offNP.x * 13;
												if(!doneP) posP.y += offNP.y * 13;
						
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	float dstN = posM.x - posN.x;
	float dstP = posP.x - posM.x;
	if(!horzSpan) dstN = posM.y - posN.y;
	if(!horzSpan) dstP = posP.y - posM.y;

	bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;
	float spanLength = (dstP + dstN);
	bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;
	float spanLengthRcp = 1.0/spanLength;

	bool directionN = dstN < dstP;
	float dst = min(dstN, dstP);
	bool goodSpan = directionN ? goodSpanN : goodSpanP;
	float subpixG = subpixF * subpixF;
	float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;
	float subpixH = subpixG * 0.35f;

	float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;
	float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
	if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;
	if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;

	float4 finalColor = FxaaTexTop(posM);

	return finalColor;
}