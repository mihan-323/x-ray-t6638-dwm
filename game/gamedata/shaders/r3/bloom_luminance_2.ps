#include "common.h"

// 	perform 2x2=4s convolution, working on 4x4=16p area
//	that means 256x256 source will be scaled to (256/4)x(256/4) = 64x64p
//	a):	256x256 => 64x64p	with log 
//	b):	64x64p	=> 8x8p
//	c):	8x8p	=> 1x1p		with exp

//	perform 4x4 bilinear, 8x8p, the step (B)
//	b):	64x64p	=> 8x8p

float luminance(float2 tc)	
{
	float4 data = s_image.Sample(smp_rtlinear, tc);
	return dot(data, 0.25); // sum components
}

float4 main(p_filter I) : SV_Target
{
	// sample
	float4 accum0;
		   accum0.x = luminance(I.Tex0.xy);
		   accum0.y = luminance(I.Tex1.xy);
		   accum0.z = luminance(I.Tex2.xy);
		   accum0.w = luminance(I.Tex3.xy);

	float4 accum1;
		   accum1.x = luminance(I.Tex4.xy);
		   accum1.y = luminance(I.Tex5.xy);
		   accum1.z = luminance(I.Tex6.xy);
		   accum1.w = luminance(I.Tex7.xy);

	float4 accum2;
		   accum2.x = luminance(I.Tex0.wz);
		   accum2.y = luminance(I.Tex1.wz);
		   accum2.z = luminance(I.Tex2.wz);
		   accum2.w = luminance(I.Tex3.wz);

	float4 accum3;
		   accum3.x = luminance(I.Tex4.wz);
		   accum3.y = luminance(I.Tex5.wz);
		   accum3.z = luminance(I.Tex6.wz);
		   accum3.w = luminance(I.Tex7.wz);

	// perform accumulation
	float4 final;
		   final.x = dot(accum0, 0.25);
		   final.y = dot(accum1, 0.25);
		   final.z = dot(accum2, 0.25);
		   final.w = dot(accum3, 0.25);

	return final;
}
