#include "common.h"

uniform float4 weight[2];

// Separable gauss filter: 	2*7 + 1 + 7*2 = 29 samples
// Samples:					0-central, -1, -2,..., -7, 1, 2,... 7
// Approximated i-count:	15t + 15a + 7a(d) + 1(out) = 38, HLSL compiled to 38 :)

float4 main(p_filter I) : SV_Target
{
	float4 accum = 0;

	// central
	accum += weight[1].w * s_bloom.Sample(smp_rtlinear, I.Tex0.xy);

	// left (7)
	// right (7) - no swizles on 'texld', so this is dep-read infact
	accum += weight[0].x * s_bloom.Sample(smp_rtlinear, I.Tex1.xy);
	accum += weight[0].x * s_bloom.Sample(smp_rtlinear, I.Tex1.wz);
			 
	accum += weight[0].y * s_bloom.Sample(smp_rtlinear, I.Tex2.xy);
	accum += weight[0].y * s_bloom.Sample(smp_rtlinear, I.Tex2.wz);
			 
	accum += weight[0].z * s_bloom.Sample(smp_rtlinear, I.Tex3.xy);
	accum += weight[0].z * s_bloom.Sample(smp_rtlinear, I.Tex3.wz);
			 
	accum += weight[0].w * s_bloom.Sample(smp_rtlinear, I.Tex4.xy);
	accum += weight[0].w * s_bloom.Sample(smp_rtlinear, I.Tex4.wz);
			 
	accum += weight[1].x * s_bloom.Sample(smp_rtlinear, I.Tex5.xy);
	accum += weight[1].x * s_bloom.Sample(smp_rtlinear, I.Tex5.wz);
			 
	accum += weight[1].y * s_bloom.Sample(smp_rtlinear, I.Tex6.xy);
	accum += weight[1].y * s_bloom.Sample(smp_rtlinear, I.Tex6.wz);
			 
	accum += weight[1].z * s_bloom.Sample(smp_rtlinear, I.Tex7.xy);
	accum += weight[1].z * s_bloom.Sample(smp_rtlinear, I.Tex7.wz);

	return accum;
}
