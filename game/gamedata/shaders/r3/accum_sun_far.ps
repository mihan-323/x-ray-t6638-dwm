#include "common.h"
#include "lmodel.h"
#define ACCUM_DIRECT
#define ACCUM_SHADOW_NEED_BOKEH
#include "shadow.h"

uniform float3 view_shadow_proj;

#ifndef SM_4_0
G_BUFFER::ACCUMULATOR main(v2p_volume I, float4 pos2d : SV_Position, uint iSample : SV_SampleIndex)
#else
#undef iSample
uniform int iSample;
G_BUFFER::ACCUMULATOR main(v2p_volume I, float4 pos2d : SV_Position)
#endif
{
	#if SHADOWMAP_VOLUMETRIC_LIGHT_TEST == 1
		return G_BUFFER::pack_accum(0, 0, 0);
	#endif

	float2 tc = I.tc.xy / I.tc.ww;

	G_BUFFER::set_sampleid(iSample);
	G_BUFFER::GBD gbd = G_BUFFER::load_P_N_hemi_mtl_mask(tc, pos2d.xy);

	gbd.P += gbd.N * 0.025;

	float s = 1;

	float4 _P = float4(gbd.P, 1);

	float4 PS = mul(m_shadow, _P);

	float border = 0.4;

	float2  PSproj = PS.xy / PS.w;
	float2 	tc_f  = (PSproj) - float2(0.5, 0.5);
			tc_f *= step(-dot(tc_f, view_shadow_proj.xy), 0);
			tc_f  = abs(tc_f);

	float fac_x = 1 - saturate((tc_f.x - border) / (0.5 - border));
	float fac_y = 1 - saturate((tc_f.y - border) / (0.5 - border));

	s  = accum_shadow(PS);
	s += ((1 - s) * (1 - fac_x * fac_y));

	if(!is_in_quad(PSproj)) s = 1;

	float4 light = plight_infinity(gbd.mtl, gbd.P, gbd.N, Ldynamic_dir.xyz);

	return G_BUFFER::pack_accum(Ldynamic_color, light.x, light.w, s);
}
