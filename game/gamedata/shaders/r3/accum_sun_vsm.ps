#include "common.h"
#include "lmodel.h"

#define ACCUM_DIRECT
#define ACCUM_SHADOW_NEED_BOKEH
#include "shadow.h"

uniform Texture2D s_vsm;

#ifndef SM_4_0
float4 main(v2p_volume I, float4 pos2d : SV_Position, uint iSample : SV_SampleIndex) : SV_Target
#else
#undef iSample
uniform int iSample;
float4 main(v2p_volume I, float4 pos2d : SV_Position) : SV_Target
#endif
{
	float2 tc = I.tc.xy / I.tc.ww;

	G_BUFFER::set_sampleid(iSample);
	G_BUFFER::GBD gbd = G_BUFFER::load_P_N_hemi_mtl_mask(tc, pos2d.xy);

	// gbd.P += gbd.N * 0.025;

	float s = 1, sunmask = 1;

	float4 _P = float4(gbd.P, 1);

	float4 PS = mul(m_shadow, _P);

	float2 stc = PS.xy / PS.w;
	float t = PS.z / PS.w;

	float2 pixel = 1.0 / 4096.0;

	float2 vsm = s_vsm.Sample(smp_nofilter, stc);

	// float2 vsm = (s_vsm.Sample(smp_rtlinear, stc + pixel * float2( 1.5, -0.5))
			    // + s_vsm.Sample(smp_rtlinear, stc + pixel * float2( 1.5,  1.5))
			    // + s_vsm.Sample(smp_rtlinear, stc + pixel * float2(-0.5, -0.5))
			    // + s_vsm.Sample(smp_rtlinear, stc + pixel * float2(-0.5,  1.5))) * 0.25;

    //float mu = vsm.x;
    //float s2 = vsm.y - mu * mu;
    //s = s2 / (s2 + (t - mu) * (t - mu));
	
	float u = vsm.x;
	float q2 = vsm.y - u*u;	
	
	// u >= t
	// s = q2 / (q2 - );

	s = u >= t;

	return s;

	#if defined(ACCUM_SUN_NEAR_MINMAX_PS)
		s = accum_shadow_minmax(PS);
	#else
		s = accum_shadow(PS);
	#endif

	#ifdef USE_HUD_SHADOWS
		if(s && G_BUFFER::load_hud_mask(tc, pos2d)) 
			s *= screen_space_shadow(tc, gbd, Ldynamic_dir.xyz, 25, 0.05, 0.0005);
	#endif

	float2 smP = mul(m_sunmask, float4(gbd.P, 1)).xy;

	sunmask = s_lmap.Sample(smp_base, smP).w;

	float4 light = plight_infinity(gbd.mtl, gbd.P, gbd.N, Ldynamic_dir.xyz);
	light *= Ldynamic_color * s;

	return light;
}
