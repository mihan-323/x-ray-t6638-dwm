#include "common.h"

uniform Texture2D s_history;
// uniform Texture2D<float2> s_motion;

namespace AAHelper
{
	struct SCENE
	{
		float3 	color;	// 24 bit
		float 	edge;	// 7 bit
		float 	plane;	// 
		uint 	mask;	// 1 bit
	};

	float4	buffer	(float2	tc);
	float4	pack	(SCENE	scene);
	SCENE	unpack	(float4	packed);
	void	lerp	(inout SCENE scene, SCENE history, float f);
	SCENE	make	(float3	color, float edge, uint mask);
	SCENE	load	(float2	tc);
	SCENE	history	(float2	tc);
	float3	color	(float2	tc);
	float	edge	(float2	tc);
	uint	mask	(float2	tc);

	float4 buffer(float2 tc)
	{
		return s_history.Sample(smp_rtlinear, tc);
	}

	float4 pack(SCENE scene)
	{
		return float4(scene.color, float((uint(scene.edge * 0x7F) & 0x7F) | 
										 (scene.mask << 7)) / 0xFF);
	}

	SCENE unpack(float4 packed)
	{
		uint a = packed.w * 0xFF;

		SCENE scene = make(packed.xyz, float(a & 0x7F) / 0x7F, (a & 0x80) / 0x80);

		return scene;
	}

	SCENE make(float3 color, float edge, uint mask)
	{
		SCENE scene = {color, edge, 1 - edge, mask};
		return scene;
	}

	SCENE load(float2 tc)
	{
		SCENE scene = make(color(tc), edge(tc), mask(tc));
		return scene;
	}

	SCENE history(float2 tc)
	{
		SCENE scene = unpack(buffer(tc));
		return scene;
	}

	float3 color(float2 tc)
	{
		return s_image.Sample(smp_rtlinear, tc).xyz;
	}

	float edge(float2 tc)
	{
		float luma			= color(tc).y;
		float luma_down 	= color(tc + screen_res.zw * int2( 0,  1)).y;
		float luma_up 		= color(tc + screen_res.zw * int2( 0, -1)).y;
		float luma_right 	= color(tc + screen_res.zw * int2( 1,  0)).y;
		float luma_left 	= color(tc + screen_res.zw * int2(-1,  0)).y;

		float edge = 	 abs(luma - luma_down);
		edge = max(edge, abs(luma - luma_up));
		edge = max(edge, abs(luma - luma_right));
		edge = max(edge, abs(luma - luma_left));

		edge = saturate(edge * edge * edge * edge * 1000);

		return edge;
	}

	uint mask(float2 tc)
	{
		return G_BUFFER::load_hud_mask(tc);
	}
}

bool mix_history(float2 tc, float x, float y, inout AAHelper::SCENE scene, AAHelper::SCENE history, float factor)
{
	float3 neighbourhood = AAHelper::color(tc + float2(x, y) * screen_res.zw);

	float3 limits[2];
	limits[0] = min(scene.color, neighbourhood);
	limits[1] = max(scene.color, neighbourhood);

	float3 center  = 0.5 * (limits[1] + limits[0]);
	float3 extents = 0.5 * (limits[1] - limits[0]);

	float3 offset = history.color - center;
	float3 repeat = abs(offset / extents);

	float repeat_max = max(repeat.x, max(repeat.y, repeat.z));

	float threshold = 1 + scene.edge + abs(scene.plane - history.plane);

	if(repeat_max <= threshold)
	{
		scene.color = lerp(scene.color, history.color, factor);
		return true;
	}

	return false;
}

void antialiasing(float2 tc, float2 tc0, inout AAHelper::SCENE scene)
{
	float3 position = G_BUFFER::load_position_wsky(tc).xyz;

	float3 position_w = mul(m_v2w, float4(position, 1));

	float4 proj_next = mul(m_tVP, float4(position_w, 1));

	float2 tc_next = proj_next.xy / proj_next.ww * float2(0.5, -0.5) + 0.5;

	if(scene.mask)
		tc_next = tc;

	// float2 motion = s_motion.Sample(smp_nofilter, tc);

	// float2 tc_next = tc + motion;

	if(!is_in_quad(tc_next))
		return;

	AAHelper::SCENE history = AAHelper::history(tc_next);

	if(!scene.mask && history.mask)
		return;

	bool success = false;

	float factor0 = 0.9;
	float factor1 = 0.9375;

	float2 velocity_abs = abs(tc_next - tc) * position.z;
	float sharpness = saturate(sqrt(velocity_abs.x + velocity_abs.y) * 2);
	float blurriness = 1 - sharpness * scene.plane;

	float confidence = scene.edge * (float)!scene.mask * blurriness;

	float factor = lerp(factor0, factor1, confidence);

	if(!success) success = mix_history(tc,  0, -1, scene, history, factor); // up
	if(!success) success = mix_history(tc,  0,  1, scene, history, factor); // bottom
	if(!success) success = mix_history(tc, -1,  0, scene, history, factor); // left
	if(!success) success = mix_history(tc,  1,  0, scene, history, factor); // right

	if(!success) scene.color = AAHelper::color(tc0);

	// scene.color = scene.edge;
}

float4 main(float2 tc : TEXCOORD0, float2 tc0 : TEXCOORD1) : SV_Target
{
	AAHelper::SCENE scene = AAHelper::load(tc);

	antialiasing(tc, tc0, scene);

	return AAHelper::pack(scene);
}